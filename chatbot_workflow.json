{
  "name": "WhatsApp + Instagram Chatbot — Full, Annotated",
  "nodes": [
    {
      "parameters": {
        "path": "meta/verify",
        "methods": ["GET"],
        "responseMode": "responseNode",
        "options": {
          "rawBody": true
        }
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000001",
      "name": "Webhook • Meta Verify (GET)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [220, 140]
    },
    {
      "parameters": {
        "responseBody": "={{$json[\"query\"][\"hub.challenge\"]}}",
        "responseCode": 200,
        "options": {}
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000002",
      "name": "Respond • Verify",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [540, 140]
    },
    {
      "parameters": {
        "jsCode": "const valid = ($input.first().json.query?.['hub.verify_token'] || '') === ($env.VERIFY_TOKEN || '');\nif (!valid) {\n  return [{ json: { valid: false, challenge: $input.first().json.query?.['hub.challenge'] || '' } }];\n}\nreturn [{ json: { valid: true, challenge: $input.first().json.query?.['hub.challenge'] || '' } }];"
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000003",
      "name": "IF • Verify Token",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [380, 240]
    },
    {
      "parameters": {
        "responseBody": "Unauthorized",
        "responseCode": 403,
        "options": {}
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000004",
      "name": "Respond • 403",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [540, 240]
    },
    {
      "parameters": {
        "path": "wa/in",
        "methods": ["POST"],
        "responseMode": "responseNode",
        "options": { "rawBody": true }
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000005",
      "name": "Webhook • WhatsApp (POST)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [220, 420]
    },
    {
      "parameters": {
        "path": "ig/in",
        "methods": ["POST"],
        "responseMode": "responseNode",
        "options": { "rawBody": true }
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000006",
      "name": "Webhook • Instagram (POST)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [220, 620]
    },
    {
      "parameters": {
        "jsCode": "// HMAC SHA-256 imza doğrulama (Meta App Secret ile)\nconst crypto = require('crypto');\nconst appSecret = $env.META_APP_SECRET || '';\nconst signature = $input.first().json.headers?.['x-hub-signature-256'] || $input.first().json.headers?.['X-Hub-Signature-256'] || '';\nconst rawBody = $input.first().json.rawBody ? Buffer.from($input.first().json.rawBody) : Buffer.from(JSON.stringify($input.first().json.body||{}));\nconst expected = 'sha256=' + crypto.createHmac('sha256', appSecret).update(rawBody).digest('hex');\nconst valid = signature === expected;\nreturn [{ json: { valid, signature, expected } }];"
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000007",
      "name": "Security • Verify Signature",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [420, 520]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.valid}}",
              "value2": true
            }
          ]
        }
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000008",
      "name": "IF • Signature OK?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [620, 520]
    },
    {
      "parameters": {
        "responseBody": "Invalid signature",
        "responseCode": 403,
        "options": {}
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000009",
      "name": "Respond • 403 (Sig)",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [800, 600]
    },
    {
      "parameters": {
        "jsCode": "// WhatsApp ve Instagram payload'unu normalize et\nconst body = $input.first().json.body || {};\nlet platform = 'whatsapp';\nif (($input.first().json.headers?.['x-meta-topic']||'').toLowerCase().includes('instagram') || (body.object||'').includes('instagram')) platform = 'instagram';\n\nlet entry = (body.entry && body.entry[0]) || {};\nlet change = (entry.changes && entry.changes[0]) || {};\nlet value = change.value || {};\n\n// WhatsApp\nlet waMsg = (value.messages && value.messages[0]) || null;\nlet waFrom = waMsg?.from || value?.contacts?.[0]?.wa_id || '';\nlet waText = waMsg?.text?.body || waMsg?.button?.text || waMsg?.interactive?.button_reply?.title || '' ;\nlet waBtnId = waMsg?.interactive?.button_reply?.id || null;\nlet waMsgId = waMsg?.id || null;\n\n// Instagram\nlet igMsg = (value.messaging && value.messaging[0] && value.messaging[0].message) || null;\nlet igFrom = (value.messaging && value.messaging[0] && value.messaging[0].sender && value.messaging[0].sender.id) || '';\nlet igText = igMsg?.text || '';\n\nconst out = {\n  platform,\n  from: platform==='whatsapp'? waFrom : igFrom,\n  text: platform==='whatsapp'? waText : igText,\n  ratingChoice: platform==='whatsapp'? waBtnId : null,\n  waMessageId: waMsgId || null,\n  raw: body,\n};\nreturn [{ json: out }];"
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000010",
      "name": "Transform • Normalize Event",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [820, 420]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "contacts",
        "columns": "platform,user_id",
        "values": "={{$json.platform}},={{$json.from}}"
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000011",
      "name": "DB • Upsert Contact",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1040, 360]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": "public",
        "table": "messages",
        "columns": "platform,user_id,direction,text,provider_msg_id",
        "values": "={{$json.platform}},={{$json.from}},in,={{$json.text}},={{$json.waMessageId}}"
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000012",
      "name": "DB • Log Inbound Message",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1040, 460]
    },
    {
      "parameters": {
        "operation": "select",
        "schema": "public",
        "table": "customer_memory",
        "returnAll": false,
        "limit": 1,
        "where": {
          "values": [
            {
              "column": "platform",
              "value": "={{$json.platform}}"
            },
            {
              "column": "user_id",
              "value": "={{$json.from}}"
            }
          ]
        }
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000013",
      "name": "DB • Fetch Memory",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1240, 360]
    },
    {
      "parameters": {
        "operation": "select",
        "schema": "public",
        "table": "messages",
        "returnAll": false,
        "limit": 10,
        "sort": {
          "values": [
            {
              "column": "created_at",
              "direction": "DESC"
            }
          ]
        },
        "where": {
          "values": [
            {
              "column": "platform",
              "value": "={{$json.platform}}"
            },
            {
              "column": "user_id",
              "value": "={{$json.from}}"
            }
          ]
        }
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000014",
      "name": "DB • Fetch Last 10 Msgs",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1240, 460]
    },
    {
      "parameters": {
        "jsCode": "// Prompt bileşenlerini hazırla\nconst memory = $('DB • Fetch Memory').first().json?.summary || '';\nconst historyRows = $('DB • Fetch Last 10 Msgs').all() || [];\nconst history = historyRows.reverse().map(item => `${item.json.direction}: ${item.json.text}`).join('\\n');\nconst userText = $('Transform • Normalize Event').first().json.text;\nconst system = `Sen bir işletme destek botusun. Her yanıt kısa, net ve nazik olmalı. Gerekirse sipariş durumunu anlat, gerekirse not al. Elde varsa müşteri belleğini (tercihler, geçmiş) dikkate al.`;\nreturn [{ json: { system, memory, history, userText } }];"
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000015",
      "name": "AI • Build Prompt Context",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1440, 410]
    },
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4o-mini",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "={{$json.system}}"
            },
            {
              "role": "system",
              "content": "Müşteri belleği: {{$json.memory}}"
            },
            {
              "role": "system",
              "content": "Geçmiş konuşma:\n{{$json.history}}"
            },
            {
              "role": "user",
              "content": "={{$json.userText}}"
            },
            {
              "role": "system",
              "content": "Cevabın SONUNA tek satırlık JSON ekle:\n{\"intent\": \"ORDER|RATING|FAQ|HANDOFF|OTHER\", \"confidence\": 0-1, \"order_id\": \"varsa\"}"
            }
          ]
        },
        "options": {
          "temperature": 0
        }
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000016",
      "name": "AI • Classify + Draft Reply",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [1660, 410]
    },
    {
      "parameters": {
        "jsCode": "// Mesaj sonundaki JSON'u ayıkla\nconst content = $input.first().json.choices?.[0]?.message?.content || '';\nconst match = content.match(/\\{\"intent\"[\\s\\S]*\\}$/);\nlet meta = { intent: 'OTHER', confidence: 0, order_id: ''};\nlet reply = content;\nif (match) {\n  try { meta = JSON.parse(match[0]); reply = content.replace(match[0], '').trim(); } catch(e) {}\n}\nreturn [{ json: { reply, meta } }];"
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000017",
      "name": "AI • Parse Intent JSON",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1860, 410]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "conditions": [
                  {
                    "leftValue": "={{$json.meta.intent}}",
                    "rightValue": "ORDER",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              },
              "outputKey": "ORDER"
            },
            {
              "conditions": {
                "conditions": [
                  {
                    "leftValue": "={{$json.meta.intent}}",
                    "rightValue": "RATING",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              },
              "outputKey": "RATING"
            },
            {
              "conditions": {
                "conditions": [
                  {
                    "leftValue": "={{$json.meta.intent}}",
                    "rightValue": "HANDOFF",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              },
              "outputKey": "HANDOFF"
            }
          ]
        },
        "fallbackOutput": "DEFAULT"
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000018",
      "name": "Route • Intent",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [2060, 410]
    },
    {
      "parameters": {
        "jsCode": "// Mesajdan sipariş numarası çıkar\nconst text = $('Transform • Normalize Event').first().json.text || '';\nconst metaOrder = $('AI • Parse Intent JSON').first().json.meta.order_id || '';\nconst m = text.match(/(\\b\\d{6,}\\b)/);\nconst orderId = metaOrder || (m? m[1] : '');\nreturn [{ json: { orderId } }];"
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000019",
      "name": "Order • Extract ID",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2260, 300]
    },
    {
      "parameters": {
        "url": "={{$env.ORDER_API_BASE}}/orders/{{$json.orderId}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000020",
      "name": "Order • HTTP Lookup",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2460, 340]
    },
    {
      "parameters": {
        "responseBody": "ok",
        "responseCode": 200,
        "options": {}
      },
      "id": "e1f0b1c0-1111-4444-aaaa-000000000021",
      "name": "Respond • 200 OK",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2860, 740]
    }
  ],
  "connections": {
    "Webhook • Meta Verify (GET)": {
      "main": [
        [
          {
            "node": "IF • Verify Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF • Verify Token": {
      "main": [
        [
          {
            "node": "Respond • Verify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook • WhatsApp (POST)": {
      "main": [
        [
          {
            "node": "Security • Verify Signature",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook • Instagram (POST)": {
      "main": [
        [
          {
            "node": "Security • Verify Signature",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Security • Verify Signature": {
      "main": [
        [
          {
            "node": "IF • Signature OK?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF • Signature OK?": {
      "main": [
        [
          {
            "node": "Transform • Normalize Event",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond • 403 (Sig)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform • Normalize Event": {
      "main": [
        [
          {
            "node": "Respond • 200 OK",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "workflow-instance-001"
  },
  "id": "workflow-001",
  "pinData": {},
  "tags": []
}
